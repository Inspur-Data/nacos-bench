name: Build Go Binary Artifact

# 触发条件：
on:
  # 1. 允许你手动从 Actions 标签页触发
  workflow_dispatch:
  # 2. 每次推送到 main 分支时触发
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 对应 Dockerfile: WORKDIR /src 和 COPY . .
      - name: Check out code
        uses: actions/checkout@v4

      # 对应 Dockerfile: FROM golang:1.22.2
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.2' # 确保 Go 版本与 Dockerfile 一致

      # 对应 Dockerfile:
      # RUN go env -w GOPROXY=https://goproxy.cn,direct
      # RUN STATIC=0 GOOS=linux GOARCH=amd64 LDFLAGS='-extldflags -static -s -w' go build ...
      - name: Build Go binary (nacos-bench)
        # 在 'env' 块中设置所有环境变量
        env:
          GOPROXY: 'https://goproxy.cn,direct'
          STATIC: '0'
          GOOS: 'linux'
          GOARCH: 'amd64'
          LDFLAGS: "-extldflags -static -s -w" # YAML 中建议使用双引号
        # 运行构建命令
        run: |
          go build -o nacos-bench cmd/main/main.go
          echo "Binary 'nacos-bench' built successfully."

      # 这是你的核心需求：上传构建产物
      - name: Upload nacos-bench Artifact
        uses: actions/upload-artifact@v4
        with:
          # 产物的名称 (在下载页面显示)
          # 我们把它命名得更具体一些，包含平台信息
          name: nacos-bench-linux-amd64

          # 要上传的文件路径 (刚刚构建出来的)
          path: ./nacos-bench

          # (可选) 设置产物的保留时间
          retention-days: 7